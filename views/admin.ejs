<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tenor+Sans&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Tienne:wght@400;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="admin-styles.css">
</head>

<body>
    <nav class="navbar">
        <div class="nav-left">
            <p id="logo">ADMIN</p>
            <a href="/admin">สินค้า</a>
        </div>
        <div class="nav-right">
            <a class="fa-regular fa-user icon" onclick="logout(event)"></a>
        </div>
    </nav>

    <div class="container">
        <div class="header">
            <h2>สินค้า</h2>
            <div class="actions">
                <button class="create" onclick="goToCreateProduct()">+ เพิ่มสินค้า</button>
            </div>
        </div>
        <div class="filters">
            <select id="gender-filter">
                <option value="" selected>ทั้งหมด</option>
                <option value="1">ผู้หญิง</option>
                <option value="2">ผู้ชาย</option>
            </select>
        </div>

        <div class="product-grid" id="product-grid"></div>
        <div class="pagination">
            <button id="prev-page" disabled>&lt;</button>
            <span id="page-info">1</span>
            <button id="next-page">&gt;</button>
        </div>
    </div>

    <script>
        let currentPage = 1;
        const itemsPerPage = 12;
        let allProducts = [];

        function fetchProducts() {
            const gender = document.getElementById("gender-filter").value;
            fetch(`/get-products?gender=${gender}`)
                .then(response => response.json())
                .then(products => {
                    allProducts = products;
                    renderProducts();
                })
                .catch(error => console.error("Error fetching products:", error));
        }

        function updatePagination() {
            document.getElementById("page-info").innerText = currentPage;
            document.getElementById("prev-page").disabled = currentPage === 1;
            document.getElementById("next-page").disabled = currentPage * itemsPerPage >= allProducts.length;
        }

        document.getElementById("prev-page").addEventListener("click", () => {
            if (currentPage > 1) {
                currentPage--;
                renderProducts();
            }
        });

        document.getElementById("next-page").addEventListener("click", () => {
            if (currentPage * itemsPerPage < allProducts.length) {
                currentPage++;
                renderProducts();
            }
        });

        document.getElementById("gender-filter").addEventListener("change", () => {
            currentPage = 1;
            fetchProducts();
        });

        fetchProducts();

        // LOGOUT FUNCTION
        function logout(event) {
            event.preventDefault();
            const confirmLogout = confirm("Do you want to Logout ?");
            if (confirmLogout) {
                window.location.href = "/signin";
            }
        }

        function goToCreateProduct() {
            window.location.href = '/create-product'; 
        }

        function goToEditProduct(productId) {
            window.location.href = `/edit-product?product_id=${productId}`;
        }
//============================================================================================================================================        
        
        function renderProducts() {
    const productGrid = document.getElementById("product-grid");
    productGrid.innerHTML = "";
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const paginatedItems = allProducts.slice(start, end);

    paginatedItems.forEach(product => {
        const productCard = `
        <div class="product-card">
            <img src="${product.image_url}" onerror="this.onerror=null; this.src='/images/default.png';" class="product-img">
            <p>${product.name}</p>
            <span class="price">$${product.price}</span>
            <div class="buttons">
                <button class="edit" onclick="goToEditProduct(${product.product_id})">แก้ไข</button>
                <button class="delete" onclick="deleteProduct(${product.product_id})">ลบ</button>
            </div>
        </div>
    `;
        productGrid.innerHTML += productCard;
    });
    updatePagination();
}

function deleteProduct(productId) {
    if (!confirm("คุณแน่ใจมั้ยที่ต้องการจะลบสินค้าชิ้นนี้?")) {
        return;
    }

    fetch("/delete-product", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ product_id: productId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("ลบสินค้าสำเร็จ!");
            fetchProducts(); // Refresh product list
        } else {
            alert("ลบสินค้าล้มเหลว: " + data.message);
        }
    })
    .catch(error => console.error("เกิดข้อผิดพลาดในการลบสินค้า:", error));
}
    </script>
</body>

</html>